LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Version 0.1

ENTITY procesador_v0_0 IS
PORT( clock : IN STD_LOGIC;
      reset : IN STD_LOGIC;
      AC_out : out std_logic_vector(15 downto 0);
      IR_out : out std_logic_vector(15 downto 0);
      PC_out : out std_logic_vector(7 downto 0);
      MEMq : in std_logic_vector(15 downto 0);
      MEMdata: out std_logic_vector(15 downto 0);
      MEMwe : out std_logic;
      MEMadr : out std_logic_vector(7 downto 0)
);
END procesador_v0_0;

ARCHITECTURE rtl OF procesador_v0_0 IS
    TYPE STATE_TYPE IS (reset_pc, fetch1, decode, add1, store0, store1, load1, jump);
    SIGNAL state: STATE_TYPE;
    SIGNAL IR, AC: STD_LOGIC_VECTOR(15 DOWNTO 0);
    SIGNAL PC : STD_LOGIC_VECTOR(7 DOWNTO 0);
BEGIN

    -- Asignaciones a puertos de salida
    AC_out <= AC;
    IR_out <= IR;
    PC_out <= PC;

    FSMD: PROCESS (CLOCK, RESET, state, PC, AC, IR)
    BEGIN
        IF reset = '1' THEN
            state <= reset_pc;
        ELSIF clock'EVENT AND clock = '1' THEN
            CASE state IS   
                WHEN reset_pc =>
                    PC <= "00000000";
                    AC <= "0000000000000000";
                    state <= fetch1;
                WHEN fetch1 =>
                    IR <= MEMq;
                    PC <= PC + 1;
                    state <= decode;
                WHEN decode =>
                    CASE IR(15 DOWNTO 8) IS
                        WHEN "00000000" =>
                            state <= add1;
                        WHEN "00000001" =>
                            state <= store0;
                        WHEN "00000010" =>
                            state <= load1;
                        WHEN "00000011" =>
                            state <= jump;
                        WHEN OTHERS =>
                            state <= fetch1;
                    END CASE;
                WHEN add1 =>
                    AC <= AC + MEMq;
                    state <= fetch1;
                WHEN store0 =>
                    state <= store1;
                WHEN store1 =>
                    state <= fetch1;
                WHEN load1 =>
                    AC <= MEMq;
                    state <= fetch1;
                WHEN jump =>
                    PC <= IR(7 DOWNTO 0);
                    state <= fetch1;
                WHEN OTHERS =>
                    state <= fetch1;
            END CASE;
        END IF;
    
        -- Asignaciones a BUSES de entrada a MEMORIA
        CASE state IS
				WHEN reset_pc =>
					 MEMadr <= "00000000";
                MEMwe <= '0';
                MEMdata <= (others => '-');
            WHEN jump | decode =>
                MEMadr <= IR(7 downto 0);
                MEMwe <= '0';
                MEMdata <= (others => '-');
            WHEN store0 => 
                MEMadr <= IR(7 downto 0);
                MEMwe <= '1';
                MEMdata <= AC;
            WHEN others =>
                MEMadr <= PC;
                MEMwe <= '0';
                MEMdata <= (others => '-');
        END CASE;
    END PROCESS;

END rtl;
